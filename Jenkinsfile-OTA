def PIPELINE_AGENT_LABEL    = 'Build-Medium'
def DOCKER_MAVEN_IMAGE      = 'maven:3-eclipse-temurin-21'
def CICD_LAST_STARTED_STAGE = ''

pipeline {
  agent {
    label PIPELINE_AGENT_LABEL
  }

  environment {
    JOB_NAME_CLEAN           = env.JOB_BASE_NAME.toLowerCase()
    GENERATED_BUILD_NAME     = sh(script: "${CICD_SCRIPTS_DIR}/job/get_build_name.sh", returnStdout: true)

    AERIUS_REGISTRY_HOSTNAME = credentials('DOCKER_REGISTRY_HOSTNAME')
    AERIUS_REGISTRY_PATH     = sh(script: "${CICD_SCRIPTS_DIR}/docker/get_registry_path.sh", returnStdout: true)
    AERIUS_REGISTRY_URL      = "${env.AERIUS_REGISTRY_HOSTNAME}/${env.AERIUS_REGISTRY_PATH}/"
    AERIUS_IMAGE_TAG         = sh(script: "${CICD_SCRIPTS_DIR}/docker/get_image_tag.sh", returnStdout: true)

    SERVICE_THEME            = "${env.SERVICE_THEME ?: 'NL'}"

  }

  stages {
    stage('Init') {
      steps {
        buildName GENERATED_BUILD_NAME
      }
    }

    stage('Maven') {
      agent {
        docker {
          label PIPELINE_AGENT_LABEL
          image DOCKER_MAVEN_IMAGE
          reuseNode true
        }
      }
      steps {
        script { CICD_LAST_STARTED_STAGE = STAGE_NAME }
        sh '''
          mvn clean versions:set -DnewVersion="${AERIUS_IMAGE_TAG}" -Pdeploy --no-transfer-progress
          mvn clean package -Pdeploy -DskipTests -DfailIfNoTests=true --no-transfer-progress
        '''
      }
    }

    stage('Docker Images') {

      steps {
        script { CICD_LAST_STARTED_STAGE = STAGE_NAME }
        sh '''
          cd docker
          "${CICD_SCRIPTS_DIR}"/docker/images_v1.0.sh
        '''
      }
    }

    stage('Post job') {
      environment {
        DEPLOY_OTA_ENVIRONMENT_CICD_URL   = credentials('DEPLOY_OTA_ENVIRONMENT_CICD_URL')
        DEPLOY_OTA_ENVIRONMENT_CICD_LOGIN = credentials('DEPLOY_OTA_ENVIRONMENT_CICD_LOGIN')
        FLAGS                             = "DISABLE_COGNITO, ${env.JOB_SPECIFIC_FLAGS ?: ''}"
        CICD_JOB_MESSAGES                 = sh(script: """${CICD_SCRIPTS_DIR}/job/add_job_duration.sh build "${currentBuild.durationString}" """, returnStdout: true)
      }

      steps {
        script { CICD_LAST_STARTED_STAGE = STAGE_NAME }
        sh '''
          "${CICD_SCRIPTS_DIR}"/job/postscript_v1.0.sh
        '''
      }
    }
  }

  post {
    always {
      withBuildUser {
        script {
          if (currentBuild.result != 'SUCCESS') {
            env.CICD_LAST_STARTED_STAGE = CICD_LAST_STARTED_STAGE
            mattermostSend(
              channel: (env.MATTERMOST_CHANNEL ? "#${env.MATTERMOST_CHANNEL}" : null),
              color: sh(script: """${CICD_SCRIPTS_DIR}/job/notify_mattermost_color.sh "${currentBuild.result}" """, returnStdout: true),
              message: sh(script: """${CICD_SCRIPTS_DIR}/job/notify_mattermost_message.sh "${currentBuild.result}" "${currentBuild.durationString}" build """, returnStdout: true)
            )
          }
        }
      }
    }
  }
}
